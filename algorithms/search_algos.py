# -*- coding: utf-8 -*-
"""Search_Algos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17tNCS-minW4cUOzQsa54yYje2jXM8Vdt

DFS
"""

def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
    print(start, end=' ')
    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Example usage:
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}
dfs(graph, 'A')  # Output: A B D E F C

"""Breadth First Search"""

from collections import deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])
    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            print(vertex, end=' ')
            visited.add(vertex)
            queue.extend(neighbor for neighbor in graph[vertex] if neighbor not in visited)

# Example usage:
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}
bfs(graph, 'A')  # Output: A B C D E F

"""A* Search"""

from queue import PriorityQueue

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star_search(graph, start, goal):
    pq = PriorityQueue()
    pq.put((0, start))
    came_from = {}
    cost_so_far = {}
    came_from[start] = None
    cost_so_far[start] = 0

    while not pq.empty():
        current = pq.get()[1]

        if current == goal:
            break

        for next in graph[current]:
            new_cost = cost_so_far[current] + graph[current][next]
            if next not in cost_so_far or new_cost < cost_so_far[next]:
                cost_so_far[next] = new_cost
                priority = new_cost + heuristic(goal, next)
                pq.put((priority, next))
                came_from[next] = current

    return came_from, cost_so_far

# Example usage:
graph = {
    (0, 0): {(1, 0): 1, (0, 1): 1},
    (1, 0): {(1, 1): 1, (0, 0): 1},
    (0, 1): {(1, 1): 1, (0, 0): 1},
    (1, 1): {(1, 0): 1, (0, 1): 1}
}
start = (0, 0)
goal = (1, 1)
came_from, cost_so_far = a_star_search(graph, start, goal)
print(f"Path: {came_from}, Cost: {cost_so_far}")

"""Linear Search"""

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

# Example usage:
arr = [2, 3, 4, 10, 40]
target = 10
result = linear_search(arr, target)
print(f"Element found at index: {result}")  # Output: Element found at index: 3

"""Binary Search"""

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

# Example usage:
arr = [2, 3, 4, 10, 40]
target = 10
result = binary_search(arr, target)
print(f"Element found at index: {result}")  # Output: Element found at index: 3